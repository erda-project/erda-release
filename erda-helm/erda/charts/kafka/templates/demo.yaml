{{- if eq .Values.global.size "demo" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: erda-kafka
  name: erda-kafka
  namespace: {{ .Values.global.namespace | default "erda-system" }}
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: erda-kafka
  serviceName: erda-kafka
  template:
    metadata:
      labels:
        app: erda-kafka
    spec:
      tolerations:
        - operator: Exists
      {{- if .Values.nodematchExpressions }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                {{- range $_, $value := .Values.nodematchExpressions }}
                  - key: {{ $value.key }}
                    operator: {{ $value.operator }}
                {{- end }}
      {{- end }}
      containers:
        - name: erda-kafka
          image: {{ .Values.global.image.repository }}/addon-kafka:{{ .Values.tag }}
          imagePullPolicy: {{ .Values.global.image.imagePullPolicy }}
          ports:
          - containerPort: 9092
            protocol: TCP
          - containerPort: 9988
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          env:
          - name: DICE_PLATFORM_ADDON
            value: erda-kafka
          - name: KAFKA_ADVERTISED_HOST_NAME
            value: erda-kafka.{{ .Values.global.namespace | default "erda-system" }}.svc.cluster.local
          - name: KAFKA_ADVERTISED_PORT
            value: '9092'
          - name: KAFKA_DEFAULT_REPLICATION_FACTOR
            value: '1'
          - name: KAFKA_DELETE_TOPIC_ENABLE
            value: 'true'
          - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
            value: '10000'
          - name: KAFKA_LOG_CLEANER_ENABLE
            value: 'true'
          - name: KAFKA_LOG_DIRS
            value: "/data"
          - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
            value: '60000'
          - name: KAFKA_LOG_RETENTION_HOURS
            value: '2'
          - name: KAFKA_LOG_SEGMENT_BYTES
            value: '536870912'
          - name: KAFKA_MESSAGE_MAX_BYTES
            value: '20000000'
          - name: KAFKA_NUM_PARTITIONS
            value: '9'
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: '1'
          - name: KAFKA_REBALANCE_BACKOFF_MS
            value: '2000'
          - name: KAFKA_REBALANCE_MAX_RETRIES
            value: '10'
          - name: KAFKA_REPLICA_FETCH_MAX_BYTES
            value: '20000000'
          - name: KAFKA_ZOOKEEPER_CONNECT
            value:  erda-zookeeper.{{ .Values.global.namespace | default "erda-system" }}.svc.cluster.local:2181
          - name: KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS
            value: '10000'
          - name: KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS
            value: '5000'
          - name: JMX_PORT
            value: '9988'
          - name: KAFKA_JMX_OPTS
            value: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=9988 -javaagent:/opt/kafka/agent/jolokia-jvm-1.6.2-agent.jar=port=8778,host=0.0.0.0'
          - name: KAFKA_HEAP_OPTS
            value: -Xmx512m -Xms512m
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          resources:
            requests:
              cpu: 0.1
              memory: 10Mi
            limits:
              cpu: 1
              memory: 1024Mi
          volumeMounts:
          - name: erda-kafka
            mountPath: /data
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 1
            timeoutSeconds: 10
            periodSeconds: 45
            successThreshold: 1
            failureThreshold: 9
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: erda-kafka
      name: erda-kafka
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.capacity | default "100Gi" }}
      storageClassName: {{ .Values.global.storageClassName | default "dice-local-volume" }}
      volumeMode: Filesystem
---
kind: Service
apiVersion: v1
metadata:
  name: erda-kafka
  namespace: {{ .Values.global.namespace | default "erda-system" }}
spec:
  clusterIP: None
  ports:
  - name: erda-kafka-tcp-9092
    protocol: TCP
    port: 9092
  - name: erda-kafka-tcp-9988
    protocol: TCP
    port: 9988
  - name: erda-kafka-tcp-8778
    protocol: TCP
    port: 8778
  selector:
    app: erda-kafka
{{- end }}
