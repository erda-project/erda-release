apiVersion: apps/v1
kind: Deployment
metadata:
  name: erda-kms
  namespace: {{ .Values.global.namespace | default "erda-system" }}
  labels:
    app.kubernetes.io/name: erda-kms
spec:
  {{- if eq .Values.global.size "prod" }}
  replicas: {{ .Values.replicas | default 2 }}
  {{- else  }}
  replicas: {{ .Values.replicas | default 1 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: erda-kms
  template:
    metadata:
      labels:
        app.kubernetes.io/name: erda-kms
    spec:
      tolerations:
        - operator: Exists
      {{- if .Values.nodematchExpressions }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  {{- range $_, $value := .Values.nodematchExpressions }}
                  - key: {{ $value.key }}
                    operator: {{ $value.operator }}
        {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - erda-kms
                topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: erda-kms
          image: {{ .Values.global.image.repository }}/addon-kms:{{ .Values.tag }}
          imagePullPolicy: {{ .Values.global.image.imagePullPolicy }}
          ports:
            - containerPort: 3082
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.hostIP
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  key: ETCD_ENDPOINTS
                  name: dice-cluster-info
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          livenessProbe:
            failureThreshold: 9
            initialDelaySeconds: 1
            periodSeconds: 15
            successThreshold: 1
            tcpSocket:
              port: 3082
            timeoutSeconds: 10
          volumeMounts:
            - mountPath: /certs/
              name: etcd-client-secret
              readOnly: true
      restartPolicy: Always
      volumes:
        - name: etcd-client-secret
          secret:
            secretName: etcd-client-secret